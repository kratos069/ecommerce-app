// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package db

import (
	"context"
)

const countUserProductOrders = `-- name: CountUserProductOrders :one
SELECT COUNT(*) FROM "Orders" o
JOIN "OrderItems" oi ON o.order_id = oi.order_id
WHERE o.user_id = $1 AND oi.product_id = $2
`

type CountUserProductOrdersParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) CountUserProductOrders(ctx context.Context, arg CountUserProductOrdersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUserProductOrders, arg.UserID, arg.ProductID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "Orders" (user_id, total_amount, status)
VALUES ($1, $2, $3)
RETURNING order_id, user_id, total_amount, status, created_at
`

type CreateOrderParams struct {
	UserID      int64   `json:"user_id"`
	TotalAmount float64 `json:"total_amount"`
	Status      string  `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.TotalAmount, arg.Status)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT order_id, user_id, total_amount, status, created_at FROM "Orders" WHERE order_id = $1
`

func (q *Queries) GetOrder(ctx context.Context, orderID int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrdersByUser = `-- name: ListOrdersByUser :many
SELECT order_id, user_id, total_amount, status, created_at FROM "Orders" WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListOrdersByUser(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.TotalAmount,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE "Orders"
SET status = $2
WHERE order_id = $1
RETURNING order_id, user_id, total_amount, status, created_at
`

type UpdateOrderStatusParams struct {
	OrderID int64  `json:"order_id"`
	Status  string `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.OrderID, arg.Status)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.TotalAmount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
