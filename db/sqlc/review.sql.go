// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: review.sql

package db

import (
	"context"
)

const createReview = `-- name: CreateReview :one
INSERT INTO "Reviews" (user_id, product_id, rating, comment)
VALUES ($1, $2, $3, $4)
RETURNING review_id, user_id, product_id, rating, comment, created_at
`

type CreateReviewParams struct {
	UserID    int64  `json:"user_id"`
	ProductID int64  `json:"product_id"`
	Rating    int64  `json:"rating"`
	Comment   string `json:"comment"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.UserID,
		arg.ProductID,
		arg.Rating,
		arg.Comment,
	)
	var i Review
	err := row.Scan(
		&i.ReviewID,
		&i.UserID,
		&i.ProductID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const getReviewsForProduct = `-- name: GetReviewsForProduct :many
SELECT review_id, user_id, product_id, rating, comment, created_at FROM "Reviews" 
WHERE product_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetReviewsForProduct(ctx context.Context, productID int64) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsForProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ReviewID,
			&i.UserID,
			&i.ProductID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
