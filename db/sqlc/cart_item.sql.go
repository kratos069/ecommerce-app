// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart_item.sql

package db

import (
	"context"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO "CartItems" (user_id, product_id, quantity, price)
VALUES ($1, $2, $3, $4)
RETURNING cart_item_id, user_id, product_id, quantity, price
`

type AddCartItemParams struct {
	UserID    int64   `json:"user_id"`
	ProductID int64   `json:"product_id"`
	Quantity  int64   `json:"quantity"`
	Price     float64 `json:"price"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addCartItem,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i CartItem
	err := row.Scan(
		&i.CartItemID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const clearUserCart = `-- name: ClearUserCart :exec
DELETE FROM "CartItems" WHERE user_id = $1
`

func (q *Queries) ClearUserCart(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, clearUserCart, userID)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM "CartItems" WHERE cart_item_id = $1
`

func (q *Queries) DeleteCartItem(ctx context.Context, cartItemID int64) error {
	_, err := q.db.Exec(ctx, deleteCartItem, cartItemID)
	return err
}

const getCartItemByUserAndProduct = `-- name: GetCartItemByUserAndProduct :one
SELECT cart_item_id, user_id, product_id, quantity, price FROM "CartItems"
WHERE user_id = $1 AND product_id = $2
LIMIT 1
`

type GetCartItemByUserAndProductParams struct {
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) GetCartItemByUserAndProduct(ctx context.Context, arg GetCartItemByUserAndProductParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByUserAndProduct, arg.UserID, arg.ProductID)
	var i CartItem
	err := row.Scan(
		&i.CartItemID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const getCartItemsByUser = `-- name: GetCartItemsByUser :many
SELECT cart_item_id, user_id, product_id, quantity, price FROM "CartItems" WHERE user_id = $1
`

func (q *Queries) GetCartItemsByUser(ctx context.Context, userID int64) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, getCartItemsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.CartItemID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :one
UPDATE "CartItems"
SET quantity = $1
WHERE user_id = $2 AND product_id = $3
RETURNING cart_item_id, user_id, product_id, quantity, price
`

type UpdateCartItemQuantityParams struct {
	Quantity  int64 `json:"quantity"`
	UserID    int64 `json:"user_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, updateCartItemQuantity, arg.Quantity, arg.UserID, arg.ProductID)
	var i CartItem
	err := row.Scan(
		&i.CartItemID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}
