# <!-- new migration file command -->
migrate create -ext sql -dir db/migration -seq add_users

# <!-- access postgres shell -->
docker exec -it postgres17 psql -U root

# <!-- github upload steps -->
git init
git add .
git commit -m "message for commit..."
git remote add origin https://github.com/your-username/your-repo-name.git
git remote -v
git branch -M main
git push -u origin main

# <!-- remove a container -->
docker rm insta-app
# <!-- remove an image -->
# docker images (check images)
docker rmi dvdfklvkdlvmdklvmd

# <!-- to make file executable -->
chmod +x start.sh
chmod +x wait-for.sh

# <!-- command to move from windows download folder to current work dir -->
mv /mnt/c/Users/Moazzan/Downloads/wait-for ./wait-for.sh

# <!-- login to aws ecr using cli -->
aws ecr get-login-password | docker login --username AWS --password-stdin 861833468085.dkr.ecr.ap-south-1.amazonaws.com

# <!-- sql file from dbml file -->
dbml2sql --postgres -o doc/schema.sql doc/db.dbml

# <!-- before merging changes with main branch -->
git checkout -b ft/newFeature
git add .
git commit -m "new feature added"
git push origin ft/newFeature
(go to github, create pull, merge and delete feature branch)
(back in terminal)
git checkout main
git pull

# wait-for.sh
waits for (blocks) the postgres conn to be estabished
# start.sh
starts the app after the conn is established

# install golang-migrate locally (ubuntu linux)
curl -L https://github.com/golang-migrate/migrate/releases/latest/download/migrate.linux-amd64.tar.gz \
  -o migrate.tar.gz && \
tar -xvzf migrate.tar.gz && \
sudo mv migrate /usr/local/bin/ && \
rm migrate.tar.gz && \
migrate -version

# updated permissions in IAM permissions
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:CompleteLayerUpload",
                "ecr:DescribeRepositories",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage",
                "ecr:UploadLayerPart",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret"
            ],
            # add resource from secrets manager
            "Resource": "arn:aws:secretsmanager:ap-south-1:123456789123:secret:e-commerce-ELP5xl"
        }
    ]
}

# docker login from terminal for aws
aws ecr get-login-password | docker login --username AWS --password-stdin 123456789123.dkr.ecr.ap-south-1.amazonaws.com